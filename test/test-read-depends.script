;;; -*- Lisp -*-
;;; ---------------------------------------------------------------------------
;;; Test to make sure that an update to included files causes a reload
;;; of the system definition.
;;; ---------------------------------------------------------------------------

(in-package :asdf-test)
;; I don't know what this does or when it's necessary
;; (setf asdf::*asdf-session* (make-instance asdf::*asdf-session-class*))
(defparameter *tmp-directory* (subpathname *asdf-directory* "build/"))
(defparameter *test-directory* (subpathname *asdf-directory* "test/"))
(defun under-tmp-directory (designator &optional (defaults *tmp-directory*))
  (namestring (subpathname defaults designator)))
(defun under-test-directory (designator &optional (defaults *test-directory*))
  (namestring (subpathname defaults designator)))

(defparameter *version-file*
  (under-tmp-directory "random-version.lisp-expr"))

;; (trace asdf/component:additional-input-files asdf/parse-defsystem::record-additional-system-input-file)

;;; write an initial version file
(unwind-protect
     (progn
       (with-open-file (str *version-file* :direction :output
                                           :if-exists :supersede)
         (format str "\"1.0\"~%"))
       (asdf:load-system "test-include")

       (let ((system (asdf:find-system "test-include")))
         (DBG "On initial load, the system version is" (component-version system))
         (DBG "After initial load the input files for the define op are:"
              (input-files (make-operation 'define-op) system))

         ;; read the initial version information correctly...
         (assert-equal (asdf:component-version system) "1.0"))
       (DBG "*******Initial load successful*******")
       (sleep 2)
       (DBG "*******Reloading*******")
       ;;(trace asdf/plan::action-up-to-date-p)
       ;; (trace asdf/action::component-operation-time)
       ;; #+allegro #+allegro
       ;; (trace (asdf:input-files :inside asdf/plan::compute-action-stamp)
       ;;        (asdf/plan::stamp<= :inside asdf/plan::compute-action-stamp)
       ;;        (asdf/plan::get-file-stamp :inside asdf/plan::compute-action-stamp))

;;; bump the version
       (with-open-file (str *version-file* :direction :output
                                           :if-exists :supersede)
         (format str "\"2.0\"~%"))
       (asdf:load-system "test-include")
       (let ((system (asdf:find-system "test-include")))
         (DBG "After reload, system version is ~%" (asdf:component-version system))
         ;; read the initial version information correctly...
         (assert-equal (asdf:component-version system) "2.0")))
  (sleep 2)
  (DBG "*******Using new input file*******")
  (let ((version-file
          (under-tmp-directory "random-version2.lisp-expr")))
    (unwind-protect
         ;; swap system definitions with different read file versions
         (progn
           (uiop:rename-file-overwriting-target
            (under-test-directory "test-include.asd")
            (under-test-directory "test-include.asd.orig"))
           (uiop:copy-file
            (under-test-directory "test-include2.asd")
            (under-test-directory "test-include.asd"))
           (with-open-file (str version-file :direction :output
                                             :if-exists :supersede)
             (format str "\"3.0\"~%"))
           (asdf:load-system "test-include")
           (let ((system (find-system "test-include")))
             (assert-equal (asdf:component-version system) "3.0")
             (assert-pathnames-equal (asdf:input-files
                            (asdf:make-operation 'asdf:define-op)
                            system)
                           (mapcar 'parse-namestring
                                   (list (under-test-directory "test-include.asd")
                                         (under-tmp-directory "random-version2.lisp-expr"))))))
      (uiop:rename-file-overwriting-target
       (under-test-directory "test-include.asd.orig")
       (under-test-directory "test-include.asd"))
      (uiop:delete-file-if-exists version-file)))
  (uiop:delete-file-if-exists *version-file*))
